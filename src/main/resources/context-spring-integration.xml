<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-4.1.xsd">

	<int:poller id="cronPoller" cron="0 15 7 * * ?" />

	<int:inbound-channel-adapter ref="echoService"
		method="echo" channel="channelBaseUrl">
		<int:poller ref="cronPoller" />
	</int:inbound-channel-adapter>

	<int:channel id="channelBaseUrl" datatype="java.lang.String" />

	<int:service-activator ref="documentService"
		method="get" input-channel="channelBaseUrl" output-channel="channelBaseDocument">
		<int:request-handler-advice-chain>
			<bean
				class="org.springframework.integration.handler.advice.RequestHandlerRetryAdvice">
				<property name="retryTemplate" ref="retryTemplate" />
			</bean>
		</int:request-handler-advice-chain>
	</int:service-activator>

	<int:channel id="channelBaseDocument" datatype="org.jsoup.nodes.Document" />


	<!-- from base, we extract the auction id from that page as a list -->
	<!-- input = channelBaseDocument (Document) : output = channelListAuctionId 
		(List<Long>) -->
	<int:service-activator input-channel="channelBaseDocument"
		output-channel="channelListAuctionId" ref="auctionIdService" method="listAuctionId" />

	<int:channel id="channelListAuctionId" />

	<int:splitter input-channel="channelListAuctionId"
		output-channel="channelAuctionId" />

	<int:channel id="channelAuctionId" datatype="java.lang.Long" />

	<!-- from the auction id, we get the auction id url -->
	<!-- input = channelAuctionId (Long) : output = channelAuctionIdUrl (String) -->
	<int:service-activator input-channel="channelAuctionId"
		output-channel="channelAuctionIdUrl" ref="urlListingMessageFormatService"
		method="format" />

	<int:channel id="channelAuctionIdUrl" datatype="java.lang.String">
		<int:dispatcher task-executor="taskExecutor" />
	</int:channel>

	<int:service-activator ref="documentService"
		method="get" input-channel="channelAuctionIdUrl" output-channel="channelAuctionIdDocument">
		<int:request-handler-advice-chain>
			<bean
				class="org.springframework.integration.handler.advice.RequestHandlerRetryAdvice">
				<property name="retryTemplate" ref="retryTemplate" />
			</bean>
		</int:request-handler-advice-chain>
	</int:service-activator>

	<int:channel id="channelAuctionIdDocument" datatype="org.jsoup.nodes.Document" />

	<!-- extract the url from the document, one document, multiple url -->
	<!-- input = channelAuctionIdDocument (Document) : output = channelListAuctionUrl 
		(List<String>) -->
	<!-- TODO: -->
	<int:service-activator input-channel="channelAuctionIdDocument"
		output-channel="channelListAuctionUrlAnchorElement" ref="listAuctionUrlAnchorSelectorService"
		method="select" />


	<int:channel id="channelListAuctionUrlAnchorElement" />

	<int:splitter input-channel="channelListAuctionUrlAnchorElement"
		output-channel="channelAuctionUrlAnchorElement" />

	<int:channel id="channelAuctionUrlAnchorElement" datatype="org.jsoup.nodes.Element" />

	<int:service-activator input-channel="channelAuctionUrlAnchorElement"
		output-channel="channelAuctionUrlText" expression="payload.attr('href')" />

	<int:channel id="channelAuctionUrlText" datatype="java.lang.String" />

	<int:service-activator input-channel="channelAuctionUrlText"
		output-channel="channelAuctionUrlId" ref="auctionUrlIdRegularExpressionService"
		method="extract" />

	<int:channel id="channelAuctionUrlId" />

	<int:service-activator input-channel="channelAuctionUrlId"
		output-channel="channelAuctionUrl" ref="urlPageFormatService" method="format" />

	<int:channel id="channelAuctionUrl">
		<int:dispatcher task-executor="taskExecutor" />
	</int:channel>


	<!-- convert one url to one document -->
	<!-- input = channelAuctionUrl (String) : output = channelAuctionDocument 
		(Document) -->
	<int:service-activator ref="documentService"
		method="get" input-channel="channelAuctionUrl" output-channel="channelAuctionDocument">
		<int:request-handler-advice-chain>
			<bean
				class="org.springframework.integration.handler.advice.RequestHandlerRetryAdvice">
				<property name="retryTemplate" ref="retryTemplate" />
			</bean>
		</int:request-handler-advice-chain>
	</int:service-activator>

	<int:channel id="channelAuctionDocument" />

	<!-- convert one url to one map -->
	<!-- input = channelAuctionDocument (Document) : output = channelAuctionMap 
		(Map) -->

	<int:service-activator ref="auctionContentService"
		method="toMap" input-channel="channelAuctionDocument" output-channel="channelAuctionMap" />

	<int:channel id="channelAuctionMap" />


	<!-- convert one map to one entity -->
	<!-- input = channelAuctionMap (Map) : output = channelAuctionObject (AuctionHouse) -->

	<int:service-activator ref="auctionContentService"
		method="toAuctionHouse" input-channel="channelAuctionMap"
		output-channel="channelAuctionObjectUnfiltered" />

	<int:channel id="channelAuctionObjectUnfiltered"
		datatype="com.twistlet.scrapecimb.model.entity.AuctionHouse" />

	<int:filter input-channel="channelAuctionObjectUnfiltered"
		output-channel="channelAuctionObjectFiltered" discard-channel="nullChannel"
		expression="!payload.propertyDescription.contains('low cost apartment') AND !payload.propertyDescription.contains('low cost flat')">
	</int:filter>

	<int:channel id="channelAuctionObjectFiltered"
		datatype="com.twistlet.scrapecimb.model.entity.AuctionHouse" />

	<int:service-activator input-channel="channelAuctionObjectFiltered"
		output-channel="nullChannel" ref="databaseService" method="saveAuctionHouse" />

	<bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
		<property name="retryPolicy">
			<bean class="org.springframework.retry.policy.SimpleRetryPolicy">
				<property name="maxAttempts" value="10" />
			</bean>
		</property>
		<property name="backOffPolicy">
			<bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
				<property name="initialInterval" value="1000" />
				<property name="multiplier" value="5.0" />
				<property name="maxInterval" value="60000" />
			</bean>
		</property>
	</bean>

</beans>
